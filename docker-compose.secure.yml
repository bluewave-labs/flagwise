version: '3.8'

# SECURE DOCKER COMPOSE CONFIGURATION
# Uses Docker secrets and removes hardcoded credentials

secrets:
  postgres_user:
    file: ./secrets/postgres_user.txt
  postgres_password:
    file: ./secrets/postgres_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  encryption_key:
    file: ./secrets/encryption_key.txt

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: flagwise-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - flagwise-network

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: flagwise-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://demo-kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      # Enable SASL for production
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_SSL
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
    networks:
      - flagwise-network

  # PostgreSQL Database with security hardening
  postgres:
    image: postgres:15-alpine  # Use Alpine for smaller attack surface
    container_name: flagwise-postgres
    environment:
      POSTGRES_DB: shadow_ai
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      # Security hardening
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    secrets:
      - postgres_user
      - postgres_password
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    # Security: Run as non-root user
    user: "999:999"  # postgres user in container
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    networks:
      - flagwise-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $(cat /run/secrets/postgres_user) -d shadow_ai"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka Consumer Service
  consumer:
    build:
      context: ./services/consumer
      dockerfile: Dockerfile.secure
    container_name: flagwise-consumer
    depends_on:
      - kafka
      - postgres
    environment:
      KAFKA_BOOTSTRAP_SERVERS: demo-kafka:9092
      POSTGRES_HOST: postgres
      POSTGRES_DB: shadow_ai
      # Use secrets instead of env vars
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      ENCRYPTION_KEY_FILE: /run/secrets/encryption_key
    secrets:
      - postgres_user
      - postgres_password
      - encryption_key
    # Security: Run as non-root user
    user: "1000:1000"
    # No volumes in production - copy code during build
    restart: unless-stopped
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
    networks:
      - flagwise-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Service
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile.secure
    container_name: flagwise-api
    depends_on:
      - postgres
    ports:
      - "127.0.0.1:8000:8000"  # Bind to localhost only - use reverse proxy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: shadow_ai
      # Use secrets instead of env vars
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      JWT_SECRET_KEY_FILE: /run/secrets/jwt_secret
      ENCRYPTION_KEY_FILE: /run/secrets/encryption_key
      # Security settings
      CORS_ORIGINS: https://yourdomain.com
    secrets:
      - postgres_user
      - postgres_password
      - jwt_secret
      - encryption_key
    # Security: Run as non-root user
    user: "1000:1000"
    # CRITICAL: Remove Docker socket mount - huge security risk
    # volumes: - /var/run/docker.sock:/var/run/docker.sock  # REMOVED
    restart: unless-stopped
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
    networks:
      - flagwise-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Frontend (production-ready)
  web:
    build:
      context: ./services/web
      dockerfile: Dockerfile.secure
    container_name: flagwise-web
    depends_on:
      - api
    ports:
      - "127.0.0.1:3000:3000"  # Bind to localhost only
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: https://api.yourdomain.com
    # Security: Run as non-root user
    user: "1000:1000"
    restart: unless-stopped
    networks:
      - flagwise-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: flagwise-redis
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - flagwise-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  flagwise-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16